{"version":3,"sources":["services/api.js","components/Categories.js","data/brazilianStates.js","components/Checkout.js","components/ButtonAddCart.js","components/Search.js","components/Main.js","components/NotFound.js","components/ProductDetails.js","components/ShoppingCart.js","App.js","serviceWorker.js","index.js"],"names":["getCategories","a","fetch","request","response","json","getProductFromId","productId","API_URL","getProductsFromQuery","query","getProductsFromCategoryAndQuery","categoryId","Categories","loadAPI","api","categories","setState","state","this","loadAPICategoryAndQuery","props","className","map","category","key","id","htmlFor","data-testid","type","name","value","onClick","Component","brazilianStates","Checkout","getProducts","cart","JSON","parse","localStorage","getItem","setCheckoutPrice","total","product","price","quantidade","reduce","acc","curr","toLocaleString","style","currency","src","thumbnail","alt","title","ButtonAddCart","addProduct","dataTestId","Search","storage","setItem","stringify","results","to","Main","handleInput","target","loadAPIQuery","onChange","NotFound","ProductDetails","setEvaluation","email","stars","evaluation","match","params","evaluations","getEvaluation","handleChange","checked","setStars","parseInt","rowStars","buttons","index","button","push","attributes","attribute","value_name","placeholder","required","evaluate","result","ShoppingCart","decreaseQuantity","decrease","filter","item","increaseQuantity","increase","length","event","App","basename","process","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41cf2922.chunk.js","sourcesContent":["export async function getCategories() {\n  const API_URL = 'https://api.mercadolibre.com/sites/MLB/categories';\n  const request = await fetch(API_URL);\n  const response = request.json();\n  return response;\n}\n\nexport async function getProductFromId(productId) {\n  const API_URL = `https://api.mercadolibre.com/items/${productId}`;\n  const request = await fetch(API_URL);\n  const response = request.json();\n  return response;\n}\n\nexport async function getProductsFromQuery(query) {\n  const API_URL = `https://api.mercadolibre.com/sites/MLB/search?q=${query}`;\n  const request = await fetch(API_URL);\n  const response = request.json();\n  return response;\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  const API_URL = `https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}&q=${query}`;\n  const request = await fetch(API_URL);\n  const response = request.json();\n  return response;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as api from '../services/api';\n\nclass Categories extends Component {\n  constructor() {\n    super();\n    this.state = {\n      categories: [],\n    };\n  }\n\n  componentDidMount() {\n    this.loadAPI();\n  }\n\n  loadAPI = async () => {\n    const categories = await api.getCategories();\n    this.setState({\n      categories,\n    });\n  }\n\n  render() {\n    const { categories } = this.state;\n    const { loadAPICategoryAndQuery } = this.props;\n    return (\n      <nav className=\"container-categories flex-container col\">\n        {\n          categories.map((category) => (\n            <label\n              key={ category.id }\n              htmlFor={ category.id }\n              data-testid=\"category\"\n            >\n              <input\n                type=\"radio\"\n                id={ category.id }\n                name=\"category\"\n                value={ category.id }\n                onClick={ loadAPICategoryAndQuery }\n              />\n              { category.name }\n            </label>\n          ))\n        }\n      </nav>\n    );\n  }\n}\n\nCategories.propTypes = {\n  loadAPICategoryAndQuery: PropTypes.func.isRequired,\n};\n\nexport default Categories;\n","const brazilianStates = [\n  '-', 'AC', 'AL', 'AP', 'AM', 'BA', 'CE',\n  'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG',\n  'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN',\n  'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'];\n\nexport default brazilianStates;\n","import React, { Component } from 'react';\nimport brazilianStates from '../data/brazilianStates';\n\nclass Checkout extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cart: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getProducts();\n    this.setCheckoutPrice();\n  }\n\n  getProducts = () => {\n    this.setState({\n      cart: JSON.parse(localStorage.getItem('cart')),\n    });\n  }\n\n  setCheckoutPrice = () => {\n    const cart = JSON.parse(localStorage.getItem('cart'));\n    let total;\n    let productPrice;\n    if (cart) {\n      productPrice = cart\n        .map((product) => product.price * product.quantidade);\n      total = productPrice\n        .reduce((acc, curr) => {\n          const result = acc + curr;\n          return result;\n        });\n    }\n    const result = total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\n    return result;\n  }\n\n  render() {\n    const { cart } = this.state;\n    const total = this.setCheckoutPrice();\n    return (\n      <main className=\"flex-container col\">\n        <div className=\"block row\">\n          <p className=\"block col\">Produtos</p>\n          <p className=\"block col\">Quantidade</p>\n          <p className=\"block col\">Preço</p>\n        </div>\n        <div className=\"block col\">\n          {cart.map((product) => (\n            <div key={ product.id } className=\"block row\">\n              <div className=\"block row\">\n                <img src={ product.thumbnail } alt={ product.title } />\n                <p data-testid=\"shopping-cart-product-name\">{ product.title }</p>\n              </div>\n              <p className=\"block col\">{product.quantidade}</p>\n              <p className=\"block col\">\n                {`R$${\n                  product.price\n                    .toLocaleString(\n                      'pt-BR', {\n                        style: 'currency',\n                        currency: 'BRL',\n                      },\n                    )\n                }`}\n              </p>\n            </div>\n          ))}\n          <p>{`Total: R$${total}`}</p>\n        </div>\n        <fieldset className=\"block col\">\n          <legend>Informações do Comprador</legend>\n          <div className=\"block row\">\n            <label htmlFor=\"checkout-fullname\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Nome Completo\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-fullname\"\n                data-testid=\"checkout-fullname\"\n                className=\"form-input\"\n              />\n            </label>\n            <label htmlFor=\"checkout-email\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Email\n              </span>\n              <input\n                type=\"email\"\n                id=\"checkout-email\"\n                data-testid=\"checkout-email\"\n                className=\"form-input\"\n              />\n            </label>\n          </div>\n          <div className=\"block row\">\n            <label htmlFor=\"checkout-cpf\" className=\"block row\">\n              <span className=\"form-label-text\">\n                CPF\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-cpf\"\n                data-testid=\"checkout-cpf\"\n                className=\"form-input\"\n              />\n            </label>\n            <label htmlFor=\"checkout-phone\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Telefone\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-phone\"\n                data-testid=\"checkout-phone\"\n                className=\"form-input\"\n              />\n            </label>\n          </div>\n        </fieldset>\n        <fieldset className=\"block col\">\n          <legend>Endereço de Cobrança</legend>\n          <div className=\"block row\">\n            <label htmlFor=\"checkout-cep\" className=\"block row\">\n              <span className=\"form-label-text\">\n                CEP\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-cep\"\n                data-testid=\"checkout-cep\"\n                className=\"form-input\"\n              />\n            </label>\n            <label htmlFor=\"checkout-address\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Endereço\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-address\"\n                data-testid=\"checkout-address\"\n                className=\"form-input\"\n              />\n            </label>\n            <label htmlFor=\"checkout-address-complement\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Complemento\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-address-complement\"\n                className=\"form-input\"\n              />\n            </label>\n          </div>\n          <div className=\"block row\">\n            <label htmlFor=\"checkout-address-number\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Número\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-address-number\"\n                className=\"form-input\"\n              />\n            </label>\n            <label htmlFor=\"checkout-address-city\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Cidade\n              </span>\n              <input\n                type=\"text\"\n                id=\"checkout-address-city\"\n                className=\"form-input\"\n              />\n            </label>\n            <label htmlFor=\"checkout-address-state\" className=\"block row\">\n              <span className=\"form-label-text\">\n                Estado\n              </span>\n              <select id=\"checkout-address-state\" className=\"form-input\">\n                {brazilianStates\n                  .map((state) => <option key={ state } value={ state }>{state}</option>)}\n              </select>\n            </label>\n          </div>\n        </fieldset>\n        <fieldset className=\"block col\">\n          <legend>Método de Pagamento</legend>\n          <div className=\"block\">\n            <label htmlFor=\"checkout-boleto\" className=\"block row\">\n              <span>Boleto</span>\n              <input type=\"radio\" id=\"checkout-boleto\" />\n            </label>\n            <label htmlFor=\"checkout-credit-card\" className=\"block row\">\n              <span>Cartão de Crédito</span>\n              <input type=\"radio\" id=\"checkout-credit-card\" />\n            </label>\n            <label htmlFor=\"checkout-credit-card\" className=\"block row\">\n              <span>Pix</span>\n              <input type=\"radio\" id=\"checkout-credit-card\" />\n            </label>\n          </div>\n        </fieldset>\n        <button type=\"button\" className=\"btn\">Finalizar Compra</button>\n      </main>\n    );\n  }\n}\n\nexport default Checkout;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ButtonAddCart extends Component {\n  render() {\n    const { addProduct, product, dataTestId } = this.props;\n    return (\n      <button\n        type=\"button\"\n        data-testid={ dataTestId }\n        onClick={ () => addProduct(product) }\n      >\n        Adicionar ao Carrinho\n      </button>\n    );\n  }\n}\n\nButtonAddCart.propTypes = {\n  addProduct: PropTypes.func.isRequired,\n  product: PropTypes.objectOf(PropTypes.any).isRequired,\n  dataTestId: PropTypes.string.isRequired,\n};\n\nexport default ButtonAddCart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport ButtonAddCart from './ButtonAddCart';\n\nclass Search extends Component {\n  addProduct = (product) => {\n    product.quantidade = 1;\n    const storage = JSON.parse(localStorage.getItem('cart'));\n    localStorage.setItem('cart', JSON.stringify([...storage, product]));\n  }\n\n  render() {\n    const { results } = this.props;\n    return (\n      <section className=\"container-search flex-container\">\n        {\n          results.map((product) => (\n            <div\n              key={ product.id }\n              data-testid=\"product\"\n              className=\"container-products flex-container col\"\n            >\n              <Link\n                data-testid=\"product-detail-link\"\n                to={ `/product-details/${product.id}` }\n              >\n                <img src={ product.thumbnail } alt={ product.title } />\n                <p>{ product.title }</p>\n                <p>\n                  {`R$${\n                    product.price\n                      .toLocaleString(\n                        'pt-BR', {\n                          style: 'currency',\n                          currency: 'BRL',\n                        },\n                      )\n                  }`}\n                </p>\n              </Link>\n              <ButtonAddCart\n                addProduct={ this.addProduct }\n                product={ product }\n                dataTestId=\"product-add-to-cart\"\n              />\n            </div>\n          ))\n        }\n      </section>\n    );\n  }\n}\n\nSearch.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Search;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Categories from './Categories';\nimport Search from './Search';\nimport * as api from '../services/api';\n\nclass Main extends Component {\n  constructor() {\n    super();\n    this.state = {\n      query: '',\n      results: [],\n    };\n  }\n\n  componentDidMount() {\n    if (!JSON.parse(localStorage.getItem('cart'))) {\n      localStorage.setItem('cart', JSON.stringify([]));\n    }\n\n    if (!JSON.parse(localStorage.getItem('evaluations'))) {\n      localStorage.setItem('evaluations', JSON.stringify([]));\n    }\n  }\n\n  handleInput = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  loadAPIQuery = async ({ target: { value } }) => {\n    const response = await api.getProductsFromQuery(value);\n    const { results } = response;\n    this.setState({\n      results,\n    });\n  }\n\n  loadAPICategoryAndQuery = async ({ target: { value } }) => {\n    const response = await api.getProductsFromCategoryAndQuery(value, '');\n    const { results } = response;\n    this.setState({\n      query: value,\n      results,\n    });\n  }\n\n  render() {\n    const { query, results } = this.state;\n    return (\n      <main className=\"container-data main flex-container\">\n        <Categories loadAPICategoryAndQuery={ this.loadAPICategoryAndQuery } />\n        <section>\n          <div className=\"container-search-header flex-container row\">\n            <input\n              type=\"text\"\n              name=\"query\"\n              data-testid=\"query-input\"\n              value={ query }\n              onChange={ this.handleInput }\n            />\n            <button\n              type=\"button\"\n              data-testid=\"query-button\"\n              value={ query }\n              onClick={ this.loadAPIQuery }\n            >\n              <div className=\"icon-find\" />\n            </button>\n            <Link\n              to=\"/shopping-cart\"\n              data-testid=\"shopping-cart-button\"\n            >\n              <div className=\"icon-cart\" />\n            </Link>\n          </div>\n          {\n            !query\n              ? (\n                <p data-testid=\"home-initial-message\">\n                  Digite algum termo de pesquisa ou escolha uma categoria.\n                </p>\n              )\n              : <Search results={ results } />\n          }\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <p>Nenhum produto foi encontrado</p>\n    );\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as api from '../services/api';\nimport ButtonAddCart from './ButtonAddCart';\n\nclass ProductDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      product: {},\n      attributes: [],\n      evaluations: [],\n      email: '',\n      stars: 0,\n      evaluation: '',\n    };\n  }\n\n  async componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    const product = await api.getProductFromId(id);\n    const { attributes } = product;\n    this.setState({\n      product,\n      attributes,\n    });\n    this.getEvaluation();\n  }\n\n  setEvaluation = () => {\n    const { email, stars, evaluation } = this.state;\n    const { match: { params: { id } } } = this.props;\n    const evaluations = JSON.parse(localStorage.getItem('evaluations'));\n    localStorage\n      .setItem('evaluations',\n        JSON.stringify([...evaluations, { id, email, stars, evaluation }]));\n    this.getEvaluation();\n    this.setState({\n      email: '',\n      stars: '',\n      evaluation: '',\n    });\n  }\n\n  getEvaluation = () => {\n    this.setState({\n      evaluations: JSON.parse(localStorage.getItem('evaluations')),\n    });\n  }\n\n  handleChange = ({ target }) => {\n    const { name } = target;\n    const value = (target.type === 'checkbox' || target.type === 'radio')\n      ? target.checked : target.value;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  addProduct = (product) => {\n    product.quantidade = 1;\n    const storage = JSON.parse(localStorage.getItem('cart'));\n    localStorage.setItem('cart', JSON.stringify([...storage, product]));\n  }\n\n  setStars = ({ target: { value } }) => {\n    this.setState({\n      stars: parseInt(value, 10),\n    });\n  }\n\n  // Referência:  https://devpleno.com/loopsrepeticoesiteracoes-no-jsx-do-react\n  rowStars = () => {\n    // return <div className=\"rate\" data-testeid={ `${index}-rating` }>teste</>;\n    const buttons = [];\n    const max = 5;\n    for (let index = 1; index <= max; index += 1) {\n      const button = (\n        <button\n          type=\"button\"\n          data-testid={ `${index}-rating` }\n          value={ index }\n          onClick={ this.setStars }\n        >\n          {index}\n        </button>\n      );\n      buttons.push(button);\n    }\n    return buttons;\n  }\n\n  render() {\n    const { product, email, evaluation, evaluations, attributes } = this.state;\n    const { match: { params: { id } } } = this.props;\n    const stars = this.rowStars();\n\n    return (\n      <div>\n        <header className=\"container-header\">\n          <Link to=\"/shopping-cart\" data-testid=\"shopping-cart-button\">\n            <div className=\"icon-cart\" />\n          </Link>\n        </header>\n        <div className=\"container-product-detail flex-container row\">\n          <h2\n            data-testid=\"product-detail-name\"\n          >\n            {`${product.title} - R$${product.price}`}\n          </h2>\n          <figure className=\"figure-container flex-container col\">\n            <img src={ product.thumbnail } alt={ `Imagem do ${product.title} ` } />\n            <ButtonAddCart\n              addProduct={ this.addProduct }\n              product={ product }\n              data-testid=\"product-detail-add-to-cart\"\n            />\n          </figure>\n          <div className=\"container-product-technical-detail\">\n            <h3>Especificações Técnicas</h3>\n            <ul>\n              {\n                attributes.map((attribute) => (\n                  <li key={ attribute.id }>\n                    { `${attribute.name}: ${attribute.value_name}` }\n                  </li>))\n              }\n            </ul>\n          </div>\n          {/* Referência:  https://devpleno.com/loopsrepeticoesiteracoes-no-jsx-do-react */}\n          <div className=\"container-evaluation flex-container col\">\n            <h2>Avalie o Produto</h2>\n            <input\n              type=\"email\"\n              placeholder=\"Digite seu email\"\n              data-testid=\"product-detail-email\"\n              name=\"email\"\n              value={ email }\n              onChange={ this.handleChange }\n              required\n            />\n            <div className=\"container-stars flex-container row\">\n              {stars}\n            </div>\n            <textarea\n              placeholder=\"Deixe aqui seu comentário\"\n              data-testid=\"product-detail-evaluation\"\n              name=\"evaluation\"\n              value={ evaluation }\n              onChange={ this.handleChange }\n            />\n            <button\n              type=\"submit\"\n              data-testid=\"submit-review-btn\"\n              onClick={ this.setEvaluation }\n            >\n              Avaliar\n            </button>\n          </div>\n          <div>\n            Avaliações\n            {\n              evaluations.map((evaluate, index) => {\n                let result;\n                if (evaluate.id === id) {\n                  result = (\n                    <div key={ index }>\n                      <p>{evaluate.email}</p>\n                      <p>{evaluate.stars}</p>\n                      <p>{evaluate.evaluation}</p>\n                    </div>\n                  );\n                }\n                return result;\n              })\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nProductDetails.propTypes = {\n  match: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default ProductDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ShoppingCart extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cart: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getProducts();\n  }\n\n  getProducts = () => {\n    this.setState({\n      cart: JSON.parse(localStorage.getItem('cart')),\n    });\n  }\n\n  decreaseQuantity = ({ target: { value } }, product) => {\n    const decrease = product.quantidade - parseInt(value, 10);\n    const { cart } = this.state;\n    cart.filter((item) => {\n      if (item.id === product.id) {\n        if (item.quantidade > 0) {\n          item.quantidade = decrease;\n          localStorage.setItem('cart', JSON.stringify([...cart]));\n        } else item.quantidade = 0;\n      }\n      return true;\n    });\n    this.getProducts();\n  }\n\n  increaseQuantity = ({ target: { value } }, product) => {\n    const increase = product.quantidade + parseInt(value, 10);\n    const { cart } = this.state;\n    cart.filter((item) => {\n      if (item.id === product.id) {\n        item.quantidade = increase;\n        localStorage.setItem('cart', JSON.stringify([...cart]));\n      }\n      return true;\n    });\n    this.getProducts();\n  };\n\n  render() {\n    const { cart } = this.state;\n    return (\n      <main className=\"container-data\">\n        <div className=\"block row\">\n          <p className=\"block col\">Produtos</p>\n          <p className=\"block col\">Quantidade</p>\n          <p className=\"block col\">Preço</p>\n        </div>\n        {!cart.length\n          && <p data-testid=\"shopping-cart-empty-message\">Seu carrinho está vazio</p>}\n        {cart.map((product) => (\n          <div key={ product.id } className=\"block row\">\n            <div className=\"block row\">\n              <img src={ product.thumbnail } alt={ product.title } />\n              <p data-testid=\"shopping-cart-product-name\">{ product.title }</p>\n            </div>\n            <div className=\"block row\">\n              <button type=\"button\" className=\"btn\">X</button>\n              Quantidade\n              <button\n                type=\"button\"\n                data-testid=\"product-decrease-quantity\"\n                className=\"btn\"\n                value={ 1 }\n                onClick={ (event) => this.decreaseQuantity(event, product) }\n              >\n                -\n              </button>\n              <span\n                data-testid=\"shopping-cart-product-quantity\"\n              >\n                {product.quantidade }\n              </span>\n              <button\n                type=\"button\"\n                data-testid=\"product-increase-quantity\"\n                className=\"btn\"\n                value={ 1 }\n                onClick={ (event) => this.increaseQuantity(event, product) }\n              >\n                +\n              </button>\n            </div>\n            <span className=\"block row\">\n              {`R$${\n                product.price\n                  .toLocaleString(\n                    'pt-BR', {\n                      style: 'currency',\n                      currency: 'BRL',\n                    },\n                  )\n              }`}\n            </span>\n          </div>\n        ))}\n        <div className=\"row\">\n          <Link\n            to=\"/checkout\"\n            data-testid=\"checkout-products\"\n            className=\"btn\"\n          >\n            Finalizar Compra\n          </Link>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default ShoppingCart;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Categories from './components/Categories';\nimport Checkout from './components/Checkout';\nimport Main from './components/Main';\nimport NotFound from './components/NotFound';\nimport ProductDetails from './components/ProductDetails';\nimport ShoppingCart from './components/ShoppingCart';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <Switch>\n        <Route exact path=\"/product-details/:id\" component={ ProductDetails } />\n        <Route exact path=\"/checkout\" component={ Checkout } />\n        <Route exact path=\"/shopping-cart\" component={ ShoppingCart } />\n        <Route exact path=\"/categories\" component={ Categories } />\n        <Route exact path=\"/\" component={ Main } />\n        <Route exact path=\"*\" component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}